Timer unit: 1e-06 s

Total time: 0 s
File: /mnt/sdc1/yanleizhang/workspace/pytorch_projects/ssd.pytorch/utils/augmentations.py
Function: intersect at line 9

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     9                                           @profile
    10                                           def intersect(box_a, box_b):
    11                                               max_xy = np.minimum(box_a[:, 2:], box_b[2:])
    12                                               min_xy = np.maximum(box_a[:, :2], box_b[:2])
    13                                               inter = np.clip((max_xy - min_xy), a_min=0, a_max=np.inf)
    14                                               return inter[:, 0] * inter[:, 1]

Total time: 0 s
File: /mnt/sdc1/yanleizhang/workspace/pytorch_projects/ssd.pytorch/utils/augmentations.py
Function: jaccard_numpy at line 17

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    17                                           @profile
    18                                           def jaccard_numpy(box_a, box_b):
    19                                               """Compute the jaccard overlap of two sets of boxes.  The jaccard overlap
    20                                               is simply the intersection over union of two boxes.
    21                                               E.g.:
    22                                                   A ∩ B / A ∪ B = A ∩ B / (area(A) + area(B) - A ∩ B)
    23                                               Args:
    24                                                   box_a: Multiple bounding boxes, Shape: [num_boxes,4]
    25                                                   box_b: Single bounding box, Shape: [4]
    26                                               Return:
    27                                                   jaccard overlap: Shape: [box_a.shape[0], box_a.shape[1]]
    28                                               """
    29                                               inter = intersect(box_a, box_b)
    30                                               area_a = ((box_a[:, 2] - box_a[:, 0]) *
    31                                                         (box_a[:, 3] - box_a[:, 1]))  # [A,B]
    32                                               area_b = ((box_b[2] - box_b[0]) *
    33                                                         (box_b[3] - box_b[1]))  # [A,B]
    34                                               union = area_a + area_b - inter
    35                                               return inter / union  # [A,B]

Total time: 0 s
File: /mnt/sdc1/yanleizhang/workspace/pytorch_projects/ssd.pytorch/utils/augmentations.py
Function: __call__ at line 52

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    52                                               @profile
    53                                               def __call__(self, img, boxes=None, labels=None):
    54                                                   for t in self.transforms:
    55                                                       img, boxes, labels = t(img, boxes, labels)
    56                                                   return img, boxes, labels

Total time: 0 s
File: /mnt/sdc1/yanleizhang/workspace/pytorch_projects/ssd.pytorch/utils/augmentations.py
Function: __call__ at line 66

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    66                                               @profile
    67                                               def __call__(self, img, boxes=None, labels=None):
    68                                                   return self.lambd(img, boxes, labels)

Total time: 0 s
File: /mnt/sdc1/yanleizhang/workspace/pytorch_projects/ssd.pytorch/utils/augmentations.py
Function: __call__ at line 72

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    72                                               @profile
    73                                               def __call__(self, image, boxes=None, labels=None):
    74                                                   return image.astype(np.float32), boxes, labels

Total time: 0 s
File: /mnt/sdc1/yanleizhang/workspace/pytorch_projects/ssd.pytorch/utils/augmentations.py
Function: __call__ at line 81

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    81                                               @profile
    82                                               def __call__(self, image, boxes=None, labels=None):
    83                                                   image = image.astype(np.float32)
    84                                                   image -= self.mean
    85                                                   return image.astype(np.float32), boxes, labels

Total time: 0 s
File: /mnt/sdc1/yanleizhang/workspace/pytorch_projects/ssd.pytorch/utils/augmentations.py
Function: __call__ at line 89

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    89                                               @profile
    90                                               def __call__(self, image, boxes=None, labels=None):
    91                                                   height, width, channels = image.shape
    92                                                   boxes[:, 0] *= width
    93                                                   boxes[:, 2] *= width
    94                                                   boxes[:, 1] *= height
    95                                                   boxes[:, 3] *= height
    96                                           
    97                                                   return image, boxes, labels

Total time: 0 s
File: /mnt/sdc1/yanleizhang/workspace/pytorch_projects/ssd.pytorch/utils/augmentations.py
Function: __call__ at line 101

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   101                                               @profile
   102                                               def __call__(self, image, boxes=None, labels=None):
   103                                                   height, width, channels = image.shape
   104                                                   boxes[:, 0] /= width
   105                                                   boxes[:, 2] /= width
   106                                                   boxes[:, 1] /= height
   107                                                   boxes[:, 3] /= height
   108                                           
   109                                                   return image, boxes, labels

Total time: 0 s
File: /mnt/sdc1/yanleizhang/workspace/pytorch_projects/ssd.pytorch/utils/augmentations.py
Function: __call__ at line 116

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   116                                               @profile
   117                                               def __call__(self, image, boxes=None, labels=None):
   118                                                   image = cv2.resize(image, (self.size,
   119                                                                              self.size))
   120                                                   return image, boxes, labels

Total time: 0 s
File: /mnt/sdc1/yanleizhang/workspace/pytorch_projects/ssd.pytorch/utils/augmentations.py
Function: __call__ at line 130

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   130                                               @profile
   131                                               def __call__(self, image, boxes=None, labels=None):
   132                                                   if random.randint(2):
   133                                                       image[:, :, 1] *= random.uniform(self.lower, self.upper)
   134                                           
   135                                                   return image, boxes, labels

Total time: 0 s
File: /mnt/sdc1/yanleizhang/workspace/pytorch_projects/ssd.pytorch/utils/augmentations.py
Function: __call__ at line 143

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   143                                               @profile
   144                                               def __call__(self, image, boxes=None, labels=None):
   145                                                   if random.randint(2):
   146                                                       image[:, :, 0] += random.uniform(-self.delta, self.delta)
   147                                                       image[:, :, 0][image[:, :, 0] > 360.0] -= 360.0
   148                                                       image[:, :, 0][image[:, :, 0] < 0.0] += 360.0
   149                                                   return image, boxes, labels

Total time: 0 s
File: /mnt/sdc1/yanleizhang/workspace/pytorch_projects/ssd.pytorch/utils/augmentations.py
Function: __call__ at line 158

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   158                                               @profile
   159                                               def __call__(self, image, boxes=None, labels=None):
   160                                                   if random.randint(2):
   161                                                       swap = self.perms[random.randint(len(self.perms))]
   162                                                       shuffle = SwapChannels(swap)  # shuffle channels
   163                                                       image = shuffle(image)
   164                                                   return image, boxes, labels

Total time: 0 s
File: /mnt/sdc1/yanleizhang/workspace/pytorch_projects/ssd.pytorch/utils/augmentations.py
Function: __call__ at line 172

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   172                                               @profile
   173                                               def __call__(self, image, boxes=None, labels=None):
   174                                                   if self.current == 'BGR' and self.transform == 'HSV':
   175                                                       image = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)
   176                                                   elif self.current == 'HSV' and self.transform == 'BGR':
   177                                                       image = cv2.cvtColor(image, cv2.COLOR_HSV2BGR)
   178                                                   else:
   179                                                       raise NotImplementedError
   180                                                   return image, boxes, labels

Total time: 0 s
File: /mnt/sdc1/yanleizhang/workspace/pytorch_projects/ssd.pytorch/utils/augmentations.py
Function: __call__ at line 190

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   190                                               @profile
   191                                               # expects float image
   192                                               def __call__(self, image, boxes=None, labels=None):
   193                                                   if random.randint(2):
   194                                                       alpha = random.uniform(self.lower, self.upper)
   195                                                       image *= alpha
   196                                                   return image, boxes, labels

Total time: 0 s
File: /mnt/sdc1/yanleizhang/workspace/pytorch_projects/ssd.pytorch/utils/augmentations.py
Function: __call__ at line 205

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   205                                               @profile
   206                                               def __call__(self, image, boxes=None, labels=None):
   207                                                   if random.randint(2):
   208                                                       delta = random.uniform(-self.delta, self.delta)
   209                                                       image += delta
   210                                                   return image, boxes, labels

Total time: 0 s
File: /mnt/sdc1/yanleizhang/workspace/pytorch_projects/ssd.pytorch/utils/augmentations.py
Function: __call__ at line 214

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   214                                               @profile
   215                                               def __call__(self, tensor, boxes=None, labels=None):
   216                                                   return tensor.cpu().numpy().astype(np.float32).transpose((1, 2, 0)), boxes, labels

Total time: 0 s
File: /mnt/sdc1/yanleizhang/workspace/pytorch_projects/ssd.pytorch/utils/augmentations.py
Function: __call__ at line 220

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   220                                               @profile
   221                                               def __call__(self, cvimage, boxes=None, labels=None):
   222                                                   return torch.from_numpy(cvimage.astype(np.float32)).permute(2, 0, 1), boxes, labels

Total time: 0 s
File: /mnt/sdc1/yanleizhang/workspace/pytorch_projects/ssd.pytorch/utils/augmentations.py
Function: __call__ at line 252

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   252                                               @profile
   253                                               def __call__(self, image, boxes=None, labels=None):
   254                                                   height, width, _ = image.shape
   255                                                   while True:
   256                                                       # randomly choose a mode
   257                                                       mode = random.choice(self.sample_options)
   258                                                       if mode is None:
   259                                                           return image, boxes, labels
   260                                           
   261                                                       min_iou, max_iou = mode
   262                                                       if min_iou is None:
   263                                                           min_iou = float('-inf')
   264                                                       if max_iou is None:
   265                                                           max_iou = float('inf')
   266                                           
   267                                                       # max trails (50)
   268                                                       for _ in range(50):
   269                                                           current_image = image
   270                                           
   271                                                           w = random.uniform(0.3 * width, width)
   272                                                           h = random.uniform(0.3 * height, height)
   273                                           
   274                                                           # aspect ratio constraint b/t .5 & 2
   275                                                           if h / w < 0.5 or h / w > 2:
   276                                                               continue
   277                                           
   278                                                           left = random.uniform(width - w)
   279                                                           top = random.uniform(height - h)
   280                                           
   281                                                           # convert to integer rect x1,y1,x2,y2
   282                                                           rect = np.array(
   283                                                               [int(left), int(top), int(left + w), int(top + h)])
   284                                           
   285                                                           # calculate IoU (jaccard overlap) b/t the cropped and gt boxes
   286                                                           overlap = jaccard_numpy(boxes, rect)
   287                                           
   288                                                           # is min and max overlap constraint satisfied? if not try again
   289                                                           if overlap.min() < min_iou and max_iou < overlap.max():
   290                                                               continue
   291                                           
   292                                                           # cut the crop from the image
   293                                                           current_image = current_image[rect[1]:rect[3], rect[0]:rect[2],
   294                                                                                         :]
   295                                           
   296                                                           # keep overlap with gt box IF center in sampled patch
   297                                                           centers = (boxes[:, :2] + boxes[:, 2:]) / 2.0
   298                                           
   299                                                           # mask in all gt boxes that above and to the left of centers
   300                                                           m1 = (rect[0] < centers[:, 0]) * (rect[1] < centers[:, 1])
   301                                           
   302                                                           # mask in all gt boxes that under and to the right of centers
   303                                                           m2 = (rect[2] > centers[:, 0]) * (rect[3] > centers[:, 1])
   304                                           
   305                                                           # mask in that both m1 and m2 are true
   306                                                           mask = m1 * m2
   307                                           
   308                                                           # have any valid boxes? try again if not
   309                                                           if not mask.any():
   310                                                               continue
   311                                           
   312                                                           # take only matching gt boxes
   313                                                           current_boxes = boxes[mask, :].copy()
   314                                           
   315                                                           # take only matching gt labels
   316                                                           current_labels = labels[mask]
   317                                           
   318                                                           # should we use the box left and top corner or the crop's
   319                                                           current_boxes[:, :2] = np.maximum(current_boxes[:, :2],
   320                                                                                             rect[:2])
   321                                                           # adjust to crop (by substracting crop's left,top)
   322                                                           current_boxes[:, :2] -= rect[:2]
   323                                           
   324                                                           current_boxes[:, 2:] = np.minimum(current_boxes[:, 2:],
   325                                                                                             rect[2:])
   326                                                           # adjust to crop (by substracting crop's left,top)
   327                                                           current_boxes[:, 2:] -= rect[:2]
   328                                           
   329                                                           return current_image, current_boxes, current_labels

Total time: 0 s
File: /mnt/sdc1/yanleizhang/workspace/pytorch_projects/ssd.pytorch/utils/augmentations.py
Function: __call__ at line 336

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   336                                               @profile
   337                                               def __call__(self, image, boxes, labels):
   338                                                   if random.randint(2):
   339                                                       return image, boxes, labels
   340                                           
   341                                                   height, width, depth = image.shape
   342                                                   ratio = random.uniform(1, 4)
   343                                                   left = random.uniform(0, width * ratio - width)
   344                                                   top = random.uniform(0, height * ratio - height)
   345                                           
   346                                                   expand_image = np.zeros(
   347                                                       (int(height * ratio), int(width * ratio), depth),
   348                                                       dtype=image.dtype)
   349                                                   expand_image[:, :, :] = self.mean
   350                                                   expand_image[int(top):int(top + height),
   351                                                                int(left):int(left + width)] = image
   352                                                   image = expand_image
   353                                           
   354                                                   boxes = boxes.copy()
   355                                                   boxes[:, :2] += (int(left), int(top))
   356                                                   boxes[:, 2:] += (int(left), int(top))
   357                                           
   358                                                   return image, boxes, labels

Total time: 0 s
File: /mnt/sdc1/yanleizhang/workspace/pytorch_projects/ssd.pytorch/utils/augmentations.py
Function: __call__ at line 362

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   362                                               @profile
   363                                               def __call__(self, image, boxes, classes):
   364                                                   _, width, _ = image.shape
   365                                                   if random.randint(2):
   366                                                       image = image[:, ::-1]
   367                                                       boxes = boxes.copy()
   368                                                       boxes[:, 0::2] = width - boxes[:, 2::-2]
   369                                                   return image, boxes, classes

Total time: 0 s
File: /mnt/sdc1/yanleizhang/workspace/pytorch_projects/ssd.pytorch/utils/augmentations.py
Function: __call__ at line 383

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   383                                               @profile
   384                                               def __call__(self, image):
   385                                                   """
   386                                                   Args:
   387                                                       image (Tensor): image tensor to be transformed
   388                                                   Return:
   389                                                       a tensor with channels swapped according to swap
   390                                                   """
   391                                                   # if torch.is_tensor(image):
   392                                                   #     image = image.data.cpu().numpy()
   393                                                   # else:
   394                                                   #     image = np.array(image)
   395                                                   image = image[:, :, self.swaps]
   396                                                   return image

Total time: 0 s
File: /mnt/sdc1/yanleizhang/workspace/pytorch_projects/ssd.pytorch/utils/augmentations.py
Function: __call__ at line 412

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   412                                               @profile
   413                                               def __call__(self, image, boxes, labels):
   414                                                   im = image.copy()
   415                                                   im, boxes, labels = self.rand_brightness(im, boxes, labels)
   416                                                   if random.randint(2):
   417                                                       distort = Compose(self.pd[:-1])
   418                                                   else:
   419                                                       distort = Compose(self.pd[1:])
   420                                                   im, boxes, labels = distort(im, boxes, labels)
   421                                                   return self.rand_light_noise(im, boxes, labels)

Total time: 0.000122 s
File: /mnt/sdc1/yanleizhang/workspace/pytorch_projects/ssd.pytorch/utils/augmentations.py
Function: __init__ at line 425

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   425                                               @profile
   426                                               def __init__(self, size=300, mean=(104, 117, 123)):
   427         1          3.0      3.0      2.5          self.mean = mean
   428         1          2.0      2.0      1.6          self.size = size
   429         1          1.0      1.0      0.8          self.augment = Compose([
   430         1          2.0      2.0      1.6              ConvertFromInts(),
   431         1          1.0      1.0      0.8              ToAbsoluteCoords(),
   432         1         51.0     51.0     41.8              PhotometricDistort(),
   433         1          5.0      5.0      4.1              Expand(self.mean),
   434         1          7.0      7.0      5.7              RandomSampleCrop(),
   435         1          1.0      1.0      0.8              RandomMirror(),
   436         1          1.0      1.0      0.8              ToPercentCoords(),
   437         1          4.0      4.0      3.3              Resize(self.size),
   438         1         44.0     44.0     36.1              SubtractMeans(self.mean)
   439                                                   ])

Total time: 0 s
File: /mnt/sdc1/yanleizhang/workspace/pytorch_projects/ssd.pytorch/utils/augmentations.py
Function: __call__ at line 441

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   441                                               @profile
   442                                               def __call__(self, img, boxes, labels):
   443                                                   return self.augment(img, boxes, labels)

Total time: 120.993 s
File: train.py
Function: train at line 71

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    71                                           @profile
    72                                           def train():
    73         1          8.0      8.0      0.0      if args.dataset == 'COCO':
    74                                                   if args.dataset_root == VOC_ROOT:
    75                                                       if not os.path.exists(COCO_ROOT):
    76                                                           parser.error('Must specify dataset_root if specifying dataset')
    77                                                       print("WARNING: Using default COCO dataset_root because " +
    78                                                             "--dataset_root was not specified.")
    79                                                       args.dataset_root = COCO_ROOT
    80                                                   cfg = coco
    81                                                   dataset = COCODetection(root=args.dataset_root,
    82                                                                           transform=SSDAugmentation(cfg['min_dim'],
    83                                                                                                     MEANS))
    84         1          4.0      4.0      0.0      elif args.dataset == 'VOC':
    85         1          5.0      5.0      0.0          if args.dataset_root == COCO_ROOT:
    86                                                       parser.error('Must specify dataset if specifying dataset_root')
    87         1          4.0      4.0      0.0          cfg = voc
    88         1          5.0      5.0      0.0          dataset = VOCDetection(root=args.dataset_root,
    89         1          6.0      6.0      0.0                                 transform=SSDAugmentation(cfg['min_dim'],
    90         1      31178.0  31178.0      0.0                                                           MEANS))
    91                                           
    92         1          6.0      6.0      0.0      if args.visdom:
    93                                                   import visdom
    94                                                   viz = visdom.Visdom()
    95                                           
    96         1    9642822.0 9642822.0      8.0      ssd_net = build_ssd('train', cfg['min_dim'], cfg['num_classes'])
    97         1          5.0      5.0      0.0      net = ssd_net
    98                                           
    99         1         10.0     10.0      0.0      if args.cuda:
   100         1        192.0    192.0      0.0          net = torch.nn.DataParallel(ssd_net)
   101         1          6.0      6.0      0.0          cudnn.benchmark = False
   102                                           
   103         1          9.0      9.0      0.0      if args.resume:
   104                                                   print('Resuming training, loading {}...'.format(args.resume))
   105                                                   ssd_net.load_weights(args.resume)
   106                                               else:
   107         1     611003.0 611003.0      0.5          vgg_weights = torch.load(args.save_folder + args.basenet)
   108         1         57.0     57.0      0.0          print('Loading base network...')
   109         1     139116.0 139116.0      0.1          ssd_net.vgg.load_state_dict(vgg_weights)
   110                                           
   111         1          5.0      5.0      0.0      if args.cuda:
   112         1       1078.0   1078.0      0.0          net = net.cuda()
   113                                           
   114         1          4.0      4.0      0.0      if not args.resume:
   115         1         31.0     31.0      0.0          print('Initializing weights...')
   116                                                   # initialize newly added layers' weights with xavier method
   117         1        473.0    473.0      0.0          ssd_net.extras.apply(weights_init)
   118         1        225.0    225.0      0.0          ssd_net.loc.apply(weights_init)
   119         1        228.0    228.0      0.0          ssd_net.conf.apply(weights_init)
   120                                           
   121         1          9.0      9.0      0.0      optimizer = optim.SGD(net.parameters(), lr=args.lr, momentum=args.momentum,
   122         1        939.0    939.0      0.0                            weight_decay=args.weight_decay)
   123         1          4.0      4.0      0.0      criterion = MultiBoxLoss(cfg['num_classes'], 0.5, True, 0, True, 3, 0.5,
   124         1        153.0    153.0      0.0                               False, args.cuda)
   125                                           
   126         1        702.0    702.0      0.0      net.train()
   127                                               # loss counters
   128         1          3.0      3.0      0.0      loc_loss = 0
   129         1          2.0      2.0      0.0      conf_loss = 0
   130         1          2.0      2.0      0.0      epoch = 0
   131         1         20.0     20.0      0.0      print('Loading the dataset...')
   132                                           
   133         1         19.0     19.0      0.0      epoch_size = len(dataset) // args.batch_size
   134         1         11.0     11.0      0.0      print('Training SSD on:', dataset.name)
   135         1          6.0      6.0      0.0      print('Using the specified args:')
   136         1        110.0    110.0      0.0      print(args)
   137                                           
   138         1          2.0      2.0      0.0      step_index = 0
   139                                           
   140         1          3.0      3.0      0.0      if args.visdom:
   141                                                   vis_title = 'SSD.PyTorch on ' + dataset.name
   142                                                   vis_legend = ['Loc Loss', 'Conf Loss', 'Total Loss']
   143                                                   iter_plot = create_vis_plot('Iteration', 'Loss', vis_title, vis_legend)
   144                                                   epoch_plot = create_vis_plot('Epoch', 'Loss', vis_title, vis_legend)
   145                                           
   146         1          7.0      7.0      0.0      data_loader = data.DataLoader(dataset, args.batch_size,
   147         1          2.0      2.0      0.0                                    num_workers=args.num_workers,
   148         1          2.0      2.0      0.0                                    shuffle=True, collate_fn=detection_collate,
   149         1         47.0     47.0      0.0                                    pin_memory=True)
   150                                               # create batch iterator
   151         1     151404.0 151404.0      0.1      batch_iterator = iter(data_loader)
   152        11         65.0      5.9      0.0      for iteration in range(args.start_iter, cfg['max_iter']):
   153        10         40.0      4.0      0.0          if args.visdom and iteration != 0 and (iteration % epoch_size == 0):
   154                                                       update_vis_plot(epoch, loc_loss, conf_loss, epoch_plot, None,
   155                                                                       'append', epoch_size)
   156                                                       # reset epoch loss counters
   157                                                       loc_loss = 0
   158                                                       conf_loss = 0
   159                                                       epoch += 1
   160                                           
   161        10         57.0      5.7      0.0          if iteration in cfg['lr_steps']:
   162                                                       step_index += 1
   163                                                       adjust_learning_rate(optimizer, args.gamma, step_index)
   164                                           
   165                                                   # load train data
   166                                                   # images, targets = next(batch_iterator)
   167                                           
   168        10         35.0      3.5      0.0          try:
   169        10    5108688.0 510868.8      4.2              images, targets = next(batch_iterator)
   170                                                   except StopIteration:
   171                                                       batch_iterator = iter(data_loader)
   172                                                       images, targets = next(batch_iterator)
   173                                           
   174        10         56.0      5.6      0.0          if args.cuda:
   175        10     117550.0  11755.0      0.1              images = Variable(images.cuda())
   176        10      63627.0   6362.7      0.1              targets = [Variable(ann.cuda(), volatile=True) for ann in targets]
   177                                                   else:
   178                                                       images = Variable(images)
   179                                                       targets = [Variable(ann, volatile=True) for ann in targets]
   180                                                   # forward
   181        10        113.0     11.3      0.0          t0 = time.time()
   182        10   92394251.0 9239425.1     76.4          out = net(images)
   183                                                   # backprop
   184        10      16000.0   1600.0      0.0          optimizer.zero_grad()
   185        10    6389171.0 638917.1      5.3          loss_l, loss_c = criterion(out, targets)
   186        10      14560.0   1456.0      0.0          loss = loss_l + loss_c
   187        10    1302755.0 130275.5      1.1          loss.backward()
   188        10      51653.0   5165.3      0.0          optimizer.step()
   189        10        114.0     11.4      0.0          t1 = time.time()
   190        10    4710990.0 471099.0      3.9          loc_loss += loss_l.data[0]
   191        10       1142.0    114.2      0.0          conf_loss += loss_c.data[0]
   192                                           
   193        10         62.0      6.2      0.0          if iteration % 10 == 0:
   194         1         79.0     79.0      0.0              print('timer: %.4f sec.' % (t1 - t0))
   195         1          7.0      7.0      0.0              print('iter ' + repr(iteration) + ' || Loss: %.4f ||' %
   196         1         59.0     59.0      0.0                    (loss.data[0]), end=' ')
   197                                           
   198        10        132.0     13.2      0.0          if args.visdom:
   199                                                       update_vis_plot(iteration, loss_l.data[0], loss_c.data[0],
   200                                                                       iter_plot, epoch_plot, 'append')
   201                                           
   202        10         44.0      4.4      0.0          if iteration != 0 and iteration % 5000 == 0:
   203                                                       print('Saving state, iter:', iteration)
   204                                                       torch.save(ssd_net.state_dict(), 'weights/ssd300_COCO_' +
   205                                                                  repr(iteration) + '.pth')
   206         1       1368.0   1368.0      0.0      torch.save(ssd_net.state_dict(),
   207         1     240251.0 240251.0      0.2                 args.save_folder + '' + args.dataset + '.pth')

